# Generated by Django 4.2.21 on 2025-06-14 17:24

import ckeditor_uploader.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('manager', 'Manager'), ('teacher', 'Teacher'), ('student', 'Student')], max_length=20)),
                ('full_name', models.CharField(blank=True, max_length=255, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=10, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('schooling_status', models.CharField(blank=True, choices=[('Public school', 'Public school'), ('Private school', 'Private school'), ('Homeschool', 'Homeschool'), ('Madrassah', 'Madrassah'), ('I am teacher', 'I am teacher')], max_length=30, null=True)),
                ('grade', models.CharField(blank=True, max_length=10, null=True)),
                ('school_name', models.CharField(blank=True, max_length=200, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('province', models.CharField(blank=True, choices=[('Balochistan', 'Balochistan'), ('Gilgit-Baltistan', 'Gilgit-Baltistan'), ('Azad Kashmir', 'Azad Kashmir'), ('Khyber-Pakhtunkhwa', 'Khyber-Pakhtunkhwa'), ('Punjab', 'Punjab'), ('Sindh', 'Sindh')], max_length=50, null=True)),
                ('subscription_plan', models.CharField(blank=True, choices=[('monthly', 'Monthly'), ('yearly', 'Yearly')], max_length=20, null=True)),
                ('subscription_expiry', models.DateField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('fee_receipt', models.ImageField(blank=True, null=True, upload_to='fee_receipts/')),
                ('account_status', models.CharField(choices=[('inactive', 'Inactive'), ('active', 'Active'), ('expired', 'Expired')], default='inactive', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Grade Temp', max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionBank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('SCQ', 'Single Correct Question'), ('MCQ', 'Multiple Correct Question'), ('FIB', 'Fill in the Blank')], max_length=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Question Bank',
                'verbose_name_plural': 'Question Banks',
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('marks_per_question', models.PositiveIntegerField()),
                ('input_box_width', models.PositiveIntegerField(default=2, help_text='Width of input box for FIB questions.')),
                ('text_alignment', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Text alignment for quiz content.', max_length=10)),
                ('font_size', models.PositiveIntegerField(default=16, help_text='Font size (in pixels) for question text.')),
                ('line_spacing', models.FloatField(default=1.5, help_text='Line spacing multiplier (e.g., 1.5 or 2.0).')),
                ('chapter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.chapter')),
                ('grade', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.grade')),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('grade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='core.grade')),
            ],
            options={
                'unique_together': {('name', 'grade')},
            },
        ),
        migrations.CreateModel(
            name='StudentQuizAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('score', models.IntegerField(default=0)),
                ('total', models.IntegerField(default=0)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.quiz')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_id', models.UUIDField()),
                ('question_type', models.CharField(max_length=10)),
                ('answer_data', models.JSONField()),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='core.studentquizattempt')),
            ],
        ),
        migrations.CreateModel(
            name='SCQQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('question_text', ckeditor_uploader.fields.RichTextUploadingField()),
                ('option_a', models.CharField(max_length=255)),
                ('option_b', models.CharField(max_length=255)),
                ('option_c', models.CharField(max_length=255)),
                ('option_d', models.CharField(max_length=255)),
                ('correct_answer', models.CharField(max_length=255)),
                ('question_bank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scq_questions', to='core.questionbank')),
            ],
        ),
        migrations.CreateModel(
            name='QuizQuestionAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_questions', models.PositiveIntegerField()),
                ('question_bank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.questionbank')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='core.quiz')),
            ],
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('total_questions', models.PositiveIntegerField()),
                ('correct_answers', models.PositiveIntegerField(default=0)),
                ('marks_obtained', models.PositiveIntegerField(default=0)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.quiz')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='quiz',
            name='subject',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.subject'),
        ),
        migrations.CreateModel(
            name='MCQQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('question_text', ckeditor_uploader.fields.RichTextUploadingField()),
                ('option_a', models.CharField(default='', max_length=255)),
                ('option_b', models.CharField(default='', max_length=255)),
                ('option_c', models.CharField(default='', max_length=255)),
                ('option_d', models.CharField(default='', max_length=255)),
                ('correct_answers', models.CharField(default='', help_text='Comma-separated e.g., A,C', max_length=255)),
                ('question_bank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mcq_questions', to='core.questionbank')),
            ],
        ),
        migrations.CreateModel(
            name='FIBQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('question_text', ckeditor_uploader.fields.RichTextUploadingField(help_text='Use [a], [b], etc. for blanks')),
                ('correct_answers', models.JSONField(help_text='Example: {"a": "answer1", "b": "answer2"}')),
                ('question_bank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fib_questions', to='core.questionbank')),
            ],
        ),
        migrations.AddField(
            model_name='chapter',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapters', to='core.subject'),
        ),
        migrations.AlterUniqueTogether(
            name='chapter',
            unique_together={('name', 'subject')},
        ),
    ]
